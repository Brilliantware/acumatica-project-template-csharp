#!/usr/bin/env node
/**
 * Px.CommandLine.exe wrapper v0.0.1
 */
import { resolve, dirname, basename } from "path"
import { readFileSync, writeFileSync, existsSync, mkdirSync, copyFileSync, readdirSync } from "fs"
import { exec } from "child_process"
import { promisify } from "util"
import { parseArgs } from "util"
import assert from "assert"
const __dirname = import.meta.dirname
const cwd = process.cwd()

const help =
    `Px.CommandLine.exe wrapper
    Usage: px <projectName> [options]
    Options:
    --exec, -x: Execute command, one or many of ['copy', 'build', 'upload', 'publish']
        it can be used multiple times
    --init, -i: Initialize package directories and files if needed
    --online, -o: Upload project using API
    copy, -c: Copy files to package source
    build, -b: Build project
    upload-offline, -u: Upload project (not working 100%)
        use -l instead if '-u' doesn't not work
    upload-online -au: Upload project using API (needs credentias in .env or environment variables)
        use -l instead of -u if '-u' is not working
    publish, -p: Publish project

    --help, -h: Display this help message
    Examples: 
        px "MyProject" --init --x "copy,build,upload,publish"        
        px "MyProject" --init -x "copy,build,upload,publish"        
        px "MyProject" -i -x copy -x build -x upload -x publish
        px "MyProject" -i -x copy -x build -x upload -x publish --online
`

function ifexists(path) { return !path ? null : existsSync(path) ? path : null }
function getdir(path) { return !path ? null : path ? dirname(path) : null }

function findProject() {
    const x = readdirSync(cwd).find(x => x.endsWith(".csproj"))
    if (x) return basename(x).replace(".csproj", "")
    return null
}
const execAsync = promisify(exec)

async function execCmd(cmd) {
    try {
        const { stdout, stderr, isError } = await execAsync(cmd).catch(err => ({ stdout: err.stdout, stderr: err.stderr, isError: true }));
        if (isError) throw new Error([cmd, stdout, stderr].join("\n"))
    } catch (error) {
        return Promise.reject(error)
    }
}

try {

    const parsed = parseArgs({
        args: process.args,
        strict: true,
        options: {
            x: { type: "string", short: "x", multiple: true },
            init: { type: "boolean", short: "i" },
            online: { type: "boolean", short: "o" },
            help: { type: "boolean", short: "h" },
            instancePath: { type: "string" },
            pxCommandLine: { type: "string" },
            targetPath: { type: "string" },
        },
        allowPositionals: true,
        tokens: true
    })

    if (!parsed.values.x && !parsed.values.init) {
        console.log(help)
        console.log("Error:\n\tNo command specified")
        process.exit(0)
    }
    parsed.values.x = parsed.values.x ?? []
    const args = {
        ...parsed.values ?? { x: [] },
        projectName: parsed.positionals[0],
        exec: {
            copy: parsed.values.x.indexOf("copy") !== -1,
            build: parsed.values.x.indexOf("build") !== -1,
            upload: parsed.values.x.indexOf("upload") !== -1,
            publish: parsed.values.x.indexOf("publish") !== -1,
        }
    }

    if (!(args.exec.build || args.exec.copy || args.exec.upload || args.exec.publish || args.init)) {
        console.log(help)
        console.log("Error:\n\tNo known command specified")
        process.exit(0)
    }

    if (args.help) {
        console.log(help)
        process.exit(0)
    }

    const projectName = args.projectName ?? findProject()

    if (!projectName) throw new Error(`Can't find project '${projectName ?? "?"}'`)

    const projectDir = getdir(ifexists(resolve(cwd, projectName + ".csproj")))
        ?? getdir(ifexists(resolve(cwd, projectName, projectName + ".csproj")))

    if (!projectDir) throw new Error(`Can't find '${projectName}' directory`)
    /**
     * Load .env file, like dotenv but simpler, no dependencies
     */
    const envFile = ifexists(resolve(projectDir, ".env")) ?? ifexists(resolve(cwd, ".env"))
    if (envFile && existsSync(envFile)) {
        const content = readFileSync(envFile, "utf-8")
        const lines = content.split("\n")
        for (let line of lines) {
            if (line.trim() === "") continue
            if (line.startsWith("#")) continue
            if (!line.includes("=")) continue
            line = line.replace('\r', "") // windows line ending
            let [key, value] = line.split("=")
            key = key.trim()
            value = value.trim()
            value = value.replace(/['"]+/g, '') // remove quotes
            process.env[key] = value
        }
    }

    const { ACUMATICA_INSTANCE_PATH } = process.env

    const instancePath = ACUMATICA_INSTANCE_PATH
        ? ifexists(ACUMATICA_INSTANCE_PATH)
        : ifexists(args.instancePath)
    if (!instancePath) throw new Error("Can't find Acumatica instance path")

    const pxCommandLine = ifexists(args.pxCommandLine)
        ?? process.env.PX_COMMAND_LINE ? ifexists(resolve(process.env.PX_COMMAND_LINE)) : null
            ?? ifexists(resolve(__dirname, "Px.CommandLine.exe"))
            ?? !instancePath ? null : resolve(instancePath, "Bin", "Px.CommandLine.exe")
    if (!pxCommandLine) throw new Error("Can't find 'Px.CommandLine.exe'")


    const packageSourceRoot = resolve(projectDir, "_package")
    const packageSource = resolve(packageSourceRoot, projectName)

    const packageOutput = resolve(packageSourceRoot, `${projectName}.zip`)

    if (args.init) {
        console.log("Initializing directories and files if needed")
        const packageSource = resolve(projectDir, "_package", projectName)
        mkdirSync(resolve(packageSource, "Bin"), { recursive: true })
        const packageProjectDir = resolve(packageSource, "_project")
        mkdirSync(packageProjectDir, { recursive: true })
        const projectMetaFile = resolve(packageProjectDir, "ProjectMetadata.xml")
        if (!existsSync(resolve(projectMetaFile))) {
            const xml = `<?xml version="1.0" encoding="utf-8"?>\n<project name="${projectName}" level="" description="" />`
            writeFileSync(projectMetaFile, xml)
        }
    }

    if (args.exec.copy) {
        console.log(`Copying '${projectName}' files to package source`)
        const { TARGET_PATH } = process.env
        const targetName = `${projectName}.dll`
        const targetPath = ifexists(args.targetPath)
            ?? ifexists(TARGET_PATH)
            ?? ifexists(resolve(projectDir, "bin", "Debug", "net4.8", targetName))
            ?? ifexists(resolve(projectDir, "bin", "Debug", "net48", targetName))
            ?? ifexists(resolve(projectDir, "bin", "Debug", targetName))
            ?? ifexists(resolve(projectDir, "bin", "net4.8", targetName))
            ?? ifexists(resolve(projectDir, "bin", "net48", targetName))
            ?? ifexists(resolve(projectDir, "bin", targetName))
        if (!targetPath) throw new Error(`Can't find '${projectName}.dll'`)
        copyFileSync(targetPath, resolve(packageSource, "Bin", targetName))
    }

    if (args.exec.build) {
        console.log("Building (zip) project '%s'", projectName)
        const cmd = `"${pxCommandLine}" /website "${instancePath}" ` +
            `/method BuildProject ` +
            `/in "${packageSource}" ` +
            `/out "${packageOutput}" `;
        await execCmd(cmd)
    }

    if (args.exec.upload && !args.online) {

        console.log("Uploading project '%s' --offline", projectName)
        const cmd = `"${pxCommandLine}" /website "${instancePath}" /method UploadCustomization /path "${packageOutput}" /name "${projectName}" /replace`;
        await execCmd(cmd).catch(err => {
            console.log(`
WARNING: px.commandline.exe throws errors but it DOES the upload anyway 
the error is thrown when the project 'exists' 
there is no error if the project did not 'exists'
we have to catch it for the upload to complete
so we can publish
See the below error message`)
            console.log(err);
        })
    }

    if (args.exec.upload && args.online) {
        if (args.uploadOnline) throw new Error("Cannot use both -u and -l at the same time")

        const { ACUMATICA_BASE_URL, ACUMATICA_USERNAME, ACUMATICA_PASSWORD, ACUMATICA_COMPANY } = process.env;
        if (!ACUMATICA_BASE_URL || !ACUMATICA_USERNAME || !ACUMATICA_PASSWORD || !ACUMATICA_COMPANY) {
            throw new Error(
                "Please set ACUMATICA_BASE_URL, ACUMATICA_USERNAME, ACUMATICA_PASSWORD, ACUMATICA_COMPANY in .env file or environment variables"
            )
        }
        const loginUrl = `${ACUMATICA_BASE_URL}/entity/auth/login`;
        const logoutUrl = `${ACUMATICA_BASE_URL}/entity/auth/logout`;
        const uploadUrl = `${ACUMATICA_BASE_URL}/CustomizationApi/import`

        async function login() {
            const res = await fetch(loginUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    name: ACUMATICA_USERNAME,
                    password: ACUMATICA_PASSWORD,
                    company: ACUMATICA_COMPANY
                })
            })
            if (!res.ok) throw new Error(`Error logging in to Acumatica API: ${res.statusText}\n${await res.text()}`)
            return res.headers.getSetCookie().filter(x => x && (/\.ASPXAUTH=/.test(x) || /ASP\.NET_SessionId=/.test(x))).join(';')
        }
        async function logout(Cookie) {
            const res = await fetch(logoutUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Cookie
                },
            })
            if (!res.ok) {
                throw new Error(`Error logging out of Acumatica API: ${res.statusText}\n${await res.text()}`)
            }
        }

        console.log("Uploading project '%s' --online", projectName)
        const Cookie = await login();
        try {
            const res = await fetch(uploadUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Cookie,
                },
                body: JSON.stringify({
                    projectLevel: 0,
                    isReplaceIfExists: true,
                    projectName,
                    projectDescription: projectName,
                    projectContentBase64: readFileSync(packageOutput).toString("base64")
                })
            })
            if (!res.ok) {
                throw new Error(`Error uploading project '${projectName}' using API: ${res.statusText}\n${await res.text()}`)
            }
        } finally {
            await logout(Cookie)
        }
    }

    if (args.exec.publish) {
        console.log("Publishing project '%s'", projectName)
        const cmd = `"${pxCommandLine}" /website "${instancePath}" /method PublishCustomization /name "${projectName}"`
        await execCmd(cmd)
    }

} catch (error) {
    console.log(error.message ?? error)
    process.exit(-1)
}